classdef input_accelerogram < OpenSees
    
    properties

        format = ' %0.9f';
        
        gm          % ground motion metadata and time history (input accelerogram)
        g           % gravitational acceleration
        dof         % degree of freedom of acceleration
        dt          % analysis time step
        free_time   % duration of free vibration after ground motion
        tol         % convergence tolerance
        max_iter    % maximum number of interations for convergence
        zeta        % damping ratio
        eigen_file  % file with list of eigenvalues
        node_damp   % list of nodes for damping assignment
        ele_damp    % list of elements for damping assignment
        
    end
    
    methods
        
        function obj = input_accelerogram(gm, g, dof, dt, free_time, tol, max_iter, zeta, eigen_file, node_damp, ele_damp)
            
            % store variables
            obj.gm = gm;
            obj.g = g;
            obj.dof = dof;
            obj.dt = dt;
            obj.free_time = free_time;
            obj.tol = tol;
            obj.max_iter = max_iter;
            obj.zeta = zeta;
            obj.eigen_file = eigen_file;
            obj.node_damp = node_damp;
            obj.ele_damp = ele_damp;
            
            history_appended = vertcat(obj.gm.history*g, zeros(obj.free_time/obj.gm.dt, 1)).';
            n_total_steps = ceil(length(history_appended)*obj.gm.dt/obj.dt);
            
            % read file with eigenvalues
            eig = load(obj.eigen_file);
            omega = sqrt(eig);
            beta = 2*zeta/(omega(1) + omega(2));
            alpha = omega(1)*omega(2)*beta;
            
            obj.cmdLine = [obj.cmdLine '\n' ...
                           'region 1 -node ' num2str([obj.node_damp.tag], ' %0g') ' -rayleigh ' num2str(alpha, obj.format) ' 0.0 0.0 0.0;\n' ...
                           'region 2 -ele ' num2str([obj.ele_damp.tag], ' %0g') ' -rayleigh ' num2str(alpha, obj.format) ' ' num2str(beta, obj.format) ' 0.0 0.0;\n' ...
                           'set ts_tag 2;\n' ...
                           'timeSeries Path $ts_tag -dt ' num2str(obj.gm.dt, obj.format) ' -values {' num2str(history_appended, obj.format) '} -prependZero;\n' ...
                           'pattern UniformExcitation 2 ' num2str(obj.dof) ' -accel $ts_tag\n' ...
                           'constraints Plain;\n' ...
                           'numberer RCM;\n' ...
                           'system Mumps -ICNTL 100;\n' ...
                           'test NormDispIncr ' num2str(obj.tol, obj.format) ' ' num2str(obj.max_iter) ';\n' ...
                           'algorithm Newton;\n' ...
                           'integrator Newmark 0.5 0.25;\n' ...
                           'analysis Transient;\n' ...
                           'set dt ' num2str(obj.dt, obj.format) ';\n' ...
                           'set n_steps ' num2str(n_total_steps) ';\n' ...
                           'set cur_step 1;\n' ...
                           'set div 10.0;\n' ...
                           'while {$cur_step < $n_steps} {\n' ...
                           '\t'     'set counter 0;\n' ...
                           '\t'     'algorithm Newton;\n' ...
                           '\t'     'set ok [analyze 1 $dt];\n' ...
                           '\t'     'if {$ok != 0} {\n' ...
                           '\t\t'       'set temp_dt [expr $dt];\n' ...
                           '\t\t'       'puts "\n\t> analysis failed to converge at step $cur_step";\n' ...
                           '\t\t'       'puts "\t\t> trying KrylovNewton";\n' ...
                           '\t\t'       'algorithm KrylovNewton;\n' ...
                           '\t\t'       'set ok [analyze 1 $dt];\n' ...
                           '\t\t'       'if {$ok != 0} {\n' ...
                           '\t\t\t'         'set t 0.0;\n' ...
                           '\t\t\t'         'set mini_t 0.0;\n' ...
                           '\t\t\t'         'set dt_temp [expr $dt/$div];\n' ...
                           '\t\t\t'         'set mini_dt_temp 0.0;\n' ...
                           '\t\t\t'         'while {$t < $dt} {\n' ...
                           '\t\t\t\t'           'set ok [analyze 1 $dt_temp];\n' ...
                           '\t\t\t\t'           'if {$ok == 0} {\n' ...
                           '\t\t\t\t\t'             'set t [expr $t + $dt_temp];\n' ...
                           '\t\t\t\t\t'             'set mini_t [expr $mini_t + $dt_temp];\n' ...
                           '\t\t\t\t\t'             'if {$mini_t == $mini_dt_temp} {set dt_temp [$dt_temp*$div]};\n' ...
                           '\t\t\t\t'           '} else {\n' ...
                           '\t\t\t\t\t'             'set mini_t 0.0;\n' ...
                           '\t\t\t\t\t'             'set mini_dt_temp $dt_temp;\n' ...
                           '\t\t\t\t\t'             'set dt_temp [expr $dt_temp/$div];\n' ...
                           '\t\t\t\t'           '};\n' ...
                           '\t\t\t'         '};\n' ...
                           '\t\t'       '};\n' ...
                           '\t'     '};\n' ...
                           '\t'     'if {$cur_step %% 100 == 0} {\n' ...
                           '\t\t'       'puts "\n> step $cur_step complete";\n' ...
                           '\t'     '};\n' ...
                           '\t'     'incr cur_step;\n' ...
                           '}'];

        end
        
    end
    
end
